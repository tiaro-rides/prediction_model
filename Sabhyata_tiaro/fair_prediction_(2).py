# -*- coding: utf-8 -*-
"""Fair_prediction (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gpk28YPfGbKxTOkxgJ3_e9YWewDL4CR4
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor

from google.colab import files
uploaded = files.upload()

# Load the dataset
df = pd.read_csv('fare_prediction_dataset.csv')

# Drop rows with missing key values
df.dropna(subset=['trip_distance_km', 'claimed_mileage_kmpl', 'fuel_price_per_litre'], inplace=True)

# Replace 0 in mileage with NaN to avoid division by zero
df['claimed_mileage_kmpl'].replace(0, np.nan, inplace=True)
df.dropna(subset=['claimed_mileage_kmpl'], inplace=True)

# Vehicle age
df['vehicle_age'] = 2025 - df['year_of_manufacture']
df['age_factor'] = df['vehicle_age'].apply(lambda x: max(0.7, 1.0 - 0.05 * x))

# AC factor
df['AC_factor'] = df['AC_on'].apply(lambda x: 1.05 if x else 1.0)

# Ride type factor
ride_type_map = {'Shared': 1.0, 'Exclusive': 1.2}
df['ride_type_factor'] = df['ride_type'].map(ride_type_map)

# Car type factor
car_type_map = {'Hatch': 1.0, 'Sedan': 1.1, 'SUV': 1.2}
df['car_type_factor'] = df['car_type'].map(car_type_map)

# Time of day factor
def time_factor(t):
    return 1.2 if str(t).lower() in ['morning', 'evening'] else 1.0
df['time_of_day_factor'] = df['time_of_day'].apply(time_factor)

# Day type factor
df['day_type_factor'] = df['day_type'].apply(lambda x: 1.1 if x == 'Weekend' else 1.0)

# Area surge
surge_map = {'High': 0.1, 'Medium': 0.0, 'Low': -0.1}
df['area_surge'] = df['area_supply_status'].map(surge_map)

# M2 calculation
df['M2'] = (df['age_factor'] * df['AC_factor'] * df['ride_type_factor'] *
            df['car_type_factor'] * df['time_of_day_factor'] * df['day_type_factor']) + df['area_surge']

# Full rule-based fare with minimum base fare (â‚¹40)
df['predicted_fare_rule'] = (
    (df['trip_distance_km'] / df['claimed_mileage_kmpl']) *
    df['fuel_price_per_litre'] * df['M2']
).apply(lambda x: max(x, 40))

y = df['predicted_fare_rule']  # your formula-based target

# Drop rows with missing actual fare (target)
df.dropna(subset=['actual_fare_paid'], inplace=True)

# Final features for ML
features = ['trip_distance_km', 'claimed_mileage_kmpl', 'fuel_price_per_litre',
            'vehicle_age', 'AC_on', 'ride_type_factor', 'car_type_factor',
            'time_of_day_factor', 'day_type_factor', 'area_surge']
X = df[features]
y = df['actual_fare_paid']

# Drop rows where any feature or target is NaN or Inf
df.replace([np.inf, -np.inf], np.nan, inplace=True)
df.dropna(subset=features + ['actual_fare_paid'], inplace=True)

# Feature and label split
X = df[features]
y = df['actual_fare_paid']

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)
rmse_lr = np.sqrt(mean_squared_error(y_test, y_pred_lr))

# Decision Tree Regression
tree_model = DecisionTreeRegressor(random_state=42)
tree_model.fit(X_train, y_train)
y_pred_tree = tree_model.predict(X_test)
rmse_tree = np.sqrt(mean_squared_error(y_test, y_pred_tree))

# Rule-Based Model RMSE
rule_rmse = np.sqrt(mean_squared_error(df['actual_fare_paid'], df['predicted_fare_rule']))

# Results
print(f"Linear Regression RMSE: {rmse_lr:.2f}")
print(f"Decision Tree RMSE: {rmse_tree:.2f}")
print(f"Rule-Based Fare RMSE: {rule_rmse:.2f}")

from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
import seaborn as sns

# Random Forest Regressor
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# RMSE
rmse_rf = np.sqrt(mean_squared_error(y_test, y_pred_rf))
print(f"Random Forest RMSE: {rmse_rf:.2f}")

# Plot Feature Importances
importances = rf_model.feature_importances_
feature_names = X.columns

plt.figure(figsize=(10, 6))
sns.barplot(x=importances, y=feature_names)
plt.title("Feature Importance (Random Forest)")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.tight_layout()
plt.show()

# Scatter Plot
plt.figure(figsize=(7, 6))
sns.scatterplot(x=y_test, y=y_pred_rf, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # y=x line
plt.xlabel("Actual Fare")
plt.ylabel("Predicted Fare")
plt.title("Random Forest: Predicted vs Actual")
plt.tight_layout()
plt.show()

print("\nðŸ“Š Final RMSE Comparison:")
print(f"Linear Regression     : {rmse_lr:.2f}")
print(f"Decision Tree         : {rmse_tree:.2f}")
print(f"Random Forest         : {rmse_rf:.2f}")
print(f"Rule-Based Formula    : {rule_rmse:.2f}")

import streamlit as st
import joblib
import numpy as np
joblib.dump(rf_model, "random_forest_model.pkl")
joblib.dump(features, "model_features.pkl")

print("Model and features saved successfully.")

# Load model and features
model = joblib.load("random_forest_model.pkl")
features = joblib.load("model_features.pkl")

st.title("Fare Prediction App ðŸš•")
st.markdown("Enter trip and car details below to predict the expected fare:")

with open("app.py", "w") as f:
    f.write("""import streamlit as st
import numpy as np

st.title("Fare Prediction App ðŸš•")
st.markdown("Enter trip and car details below to predict the expected fare:")

# User Inputs
trip_distance_km = st.number_input("Trip Distance (km)", min_value=0.1, step=0.1)
claimed_mileage_kmpl = st.number_input("Claimed Mileage (km/l)", min_value=1.0, step=0.5)
fuel_price_per_litre = st.number_input("Fuel Price (Rs/litre)", min_value=50.0, step=1.0)
vehicle_age = st.slider("Vehicle Age (years)", 0, 20, 5)
AC_on = st.selectbox("AC On?", [True, False])

# Dropdowns
ride_type = st.selectbox("Ride Type", ["Shared", "Exclusive"])
car_type = st.selectbox("Car Type", ["Hatch", "Sedan", "SUV"])
time_of_day = st.selectbox("Time of Day", ["Normal", "Rush Hour"])
day_type = st.selectbox("Day Type", ["Weekday", "Weekend"])
area_surge = st.slider("Area Surge (e.g. 0.1 for High Demand, -0.1 for Low)", -0.2, 0.2, 0.0, step=0.05)

# Prediction
if st.button("Predict Fare"):
    # Define multipliers
    age_factor = max(0.7, 1.0 - 0.05 * vehicle_age)
    AC_factor = 1.05 if AC_on else 1.0
    ride_type_factor = 1.0 if ride_type == "Shared" else 1.2
    car_type_factor = {"Hatch": 1.0, "Sedan": 1.1, "SUV": 1.2}[car_type]
    time_of_day_factor = 1.2 if time_of_day == "Rush Hour" else 1.0
    day_type_factor = 1.1 if day_type == "Weekend" else 1.0

    # M2 calculation
    M2_core = age_factor * AC_factor * ride_type_factor * car_type_factor * time_of_day_factor * day_type_factor
    M2 = M2_core + area_surge

    # Fare calculation
    base_fare = (trip_distance_km / claimed_mileage_kmpl) * fuel_price_per_litre * M2
    fare = max(base_fare, 40)

    # Display final fare
    st.success(f"Estimated Fare: Rs {fare:.2f}")

    # Generate receipt
    receipt = f\"""Fare Receipt - Tiaro

Trip Distance     : {trip_distance_km} km
Claimed Mileage   : {claimed_mileage_kmpl} km/l
Fuel Price        : Rs {fuel_price_per_litre}/litre
Vehicle Age       : {vehicle_age} years
AC On             : {'Yes' if AC_on else 'No'}
Ride Type         : {ride_type}
Car Type          : {car_type}
Time of Day       : {time_of_day}
Day Type          : {day_type}
Area Surge        : {area_surge:+.2f}

-------------------------------------
Raw Fare           : Rs {base_fare:.2f}
Final Fare (min Rs 40): Rs {fare:.2f}
-------------------------------------

Thank you for riding with Tiaro!
\"""

    st.download_button("ðŸ§¾ Download Fare Receipt", receipt, file_name="fare_receipt.txt")
""")

from pyngrok import ngrok
ngrok.set_auth_token("2ySJQ3hoL0qzgTf7BACjCuBjHLO_4NroBe6nF6rw3BXYoT81g")

!streamlit run app.py &>/content/log.txt &

public_url = ngrok.connect(8501)
print("Your app is live at:", public_url)

"""Mileage Prediction"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import numpy as np
# import pandas as pd
# from sklearn.linear_model import LinearRegression
# 
# st.title("Fare & Mileage Prediction App ðŸš•")
# 
# # âœ… Service Type Selection
# service_type = st.selectbox(
#     "Select Service Type",
#     ["ðŸš• Cab Service (Personal ride)", "ðŸš™ Car Pooling (Shared ride)"]
# )
# 
# trip_distance_km = st.number_input("Trip Distance (km)", min_value=0.1, step=0.1, value=5.0)
# fuel_price_per_litre = st.number_input("Fuel Price (Rs/litre)", min_value=50.0, step=1.0, value=96.0)
# vehicle_age = st.slider("Vehicle Age (years)", 0, 20, 5)
# car_type = st.selectbox("Car Type", ["Hatch", "Sedan", "SUV"])
# 
# if service_type == "ðŸš• Cab Service (Personal ride)":
#     ride_type = st.selectbox("Ride Type", ["Exclusive", "Shared"])
# else:
#     ride_type = "Shared"
#     st.markdown("**Car Pooling always uses Shared ride.**")
# 
# # âœ… Fixed AC always ON internally
# ac_factor = 1.2
# ride_type_factor = 1.0 if ride_type == "Shared" else 1.2
# car_type_factor = {"Hatch": 1.0, "Sedan": 1.1, "SUV": 1.2}[car_type]
# time_of_day_factor = 1.0  # Time of day fixed internally
# 
# # âœ… Simulate Training Data with Mileage
# np.random.seed(42)
# n = 500
# train_df = pd.DataFrame({
#     'vehicle_age': np.random.randint(0, 20, n),
#     'ac_factor': np.full(n, 1.2),
#     'ride_type_factor': np.random.choice([1.0, 1.2], n),
#     'car_type_factor': np.random.choice([1.0, 1.1, 1.2], n),
#     'time_of_day_factor': np.full(n, 1.0)
# })
# 
# train_df['mileage'] = (
#     21
#     - 0.5 * train_df['vehicle_age']
#     - 2.0 * (train_df['ac_factor'] - 1.0)
#     - 1.5 * (train_df['car_type_factor'] - 1.0)
#     - 1.0 * (train_df['ride_type_factor'] - 1.0)
#     - 0.5 * (train_df['time_of_day_factor'] - 1.0)
#     + np.random.normal(0, 0.5, n)
# ).clip(lower=8, upper=25)
# 
# model = LinearRegression()
# model.fit(train_df[['vehicle_age', 'ac_factor', 'ride_type_factor', 'car_type_factor', 'time_of_day_factor']], train_df['mileage'])
# 
# user_X = pd.DataFrame([{
#     'vehicle_age': vehicle_age,
#     'ac_factor': ac_factor,
#     'ride_type_factor': ride_type_factor,
#     'car_type_factor': car_type_factor,
#     'time_of_day_factor': time_of_day_factor
# }])
# 
# if st.button("Predict Fare & Mileage"):
#     predicted_mileage = model.predict(user_X)[0]
#     predicted_mileage = np.clip(predicted_mileage, 8.0, 22.0)
# 
#     fuel_used = trip_distance_km / predicted_mileage
#     base_fare = fuel_used * fuel_price_per_litre
#     final_fare = max(40, base_fare)
# 
#     st.success(f"Predicted Mileage: {predicted_mileage:.2f} km/l")
#     st.success(f"Estimated Fare: Rs {final_fare:.2f}")
# 
#     receipt = f"""
# Fare & Mileage Receipt - Tiaro
# 
# Service Type       : {service_type}
# Trip Distance      : {trip_distance_km} km
# Fuel Price         : Rs {fuel_price_per_litre}/litre
# Vehicle Age        : {vehicle_age} years
# AC                 : Always ON
# Ride Type          : {ride_type}
# Car Type           : {car_type}
# 
# Predicted Mileage  : {predicted_mileage:.2f} km/l
# Raw Fare           : Rs {base_fare:.2f}
# Final Fare         : Rs {final_fare:.2f}
# 
# Thank you for riding with Tiaro!
# """
#     st.download_button("ðŸ§¾ Download Fare Receipt", receipt, file_name="fare_receipt.txt")
#

from pyngrok import ngrok

# Kill any previous tunnels
ngrok.kill()

# Run streamlit + open tunnel
get_ipython().system_raw('streamlit run app.py &')

public_url = ngrok.connect(8501)
print(f"ðŸš€ Your app is live at: {public_url}")